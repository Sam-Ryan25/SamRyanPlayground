name: Release notes summary with llm

on:
  workflow_dispatch:
    inputs:
      days:
        description: "Number of days back to include releases"
        required: false
        default: "30"

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install axios openai

      - name: Collect, Clean, and Publish Notes
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_PASS: ${{ secrets.WP_PASS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DAYS: ${{ github.event.inputs.days }}
        run: |
          node <<'EOF'
          const axios = require('axios');
          const OpenAI = require('openai');
          
          const wpUrl = process.env.WP_URL;
          const user = process.env.WP_USER;
          const pass = process.env.WP_PASS;
          const days = parseInt(process.env.DAYS || "30", 10);
          const cutoff = new Date(Date.now() - days * 24 * 60 * 60 * 1000);

          async function run() {
            // Fetch releases from GitHub
            const releases = await axios.get(
              "https://api.github.com/repos/${{ github.repository }}/releases",
              { headers: { Authorization: `token ${process.env.GITHUB_TOKEN}` } }
            );

            const recent = releases.data.filter(r => new Date(r.published_at) >= cutoff);
            if (!recent.length) {
              console.log("‚ÑπÔ∏è No releases found in timeframe.");
              return;
            }

            const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

            let combinedContent = "";

            for (const r of recent) {
              let content = r.body || "";

              // --- Cleaning rules ---
              content = content.replace(/## What's Changed/g, '');
              content = content.replace(/## New Contributors[\s\S]*/g, '');
              content = content.replace(/Full Changelog:.*$/gm, '');
              content = content.replace(/ by @\S+/g, '');
              content = content.replace(/https:\/\/github\.com\/\S+/g, '');

              // Split into lines, trim, remove empties
              let lines = content.split('\n').map(line => line.trim()).filter(Boolean);

              if (lines.length > 0) {
                console.log(`ü§ñ Sending ${lines.length} bullet points to LLM for cleanup...`);

                const response = await openai.chat.completions.create({
                  model: "gpt-4o-mini",
                  messages: [
                    {
                      role: "system",
                      content: "You are a marketing assistant that rewrites release note bullet points so that they are more suitable for external customer facing posts. Keep each item clear, professional, and concise. You should not change the overall meaning of each item but should be written in a way that is not as technical and that an average user would understand. Return only the cleaned bullet list, one per line. If the text `**Full Changelog**:` even appears remove it. Do not apply any markdown formatting to your answer. You do not need to add `-` before each item as wordpress already makes them bullet points"
                    },
                    { role: "user", content: lines.join("\n") }
                  ],
                  temperature: 0.3,
                  max_tokens: 1000,
                });

                const cleanedBullets = response.choices[0].message.content
                  .split("\n")
                  .map(l => l.trim())
                  .filter(Boolean);

                lines = cleanedBullets;
              }

              // Wrap each release in its own section
              const section = `
                <h2>${r.name || r.tag_name} (${r.published_at.slice(0,10)})</h2>
                <h3>What's Changed</h3>
                <ul>
                  ${lines.map(line => `<li>${line}</li>`).join('\n')}
                </ul>
              `;

              combinedContent += section + "\n";
            }

            // Post aggregated notes to WordPress as draft
            await axios.post(
              `${wpUrl}/wp-json/wp/v2/posts`,
              {
                title: `Release Notes (Last ${days} Days)`,
                content: combinedContent,
                status: "draft"
              },
              { auth: { username: user, password: pass } }
            );

            console.log("‚úÖ Cleaned release notes saved as draft in WordPress!");
          }

          run().catch(err => {
            console.error("‚ùå Failed:", err.response?.data || err.message || err);
            process.exit(1);
          });
          EOF
